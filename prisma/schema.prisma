generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int           @id @default(autoincrement())
  username     String?       @unique
  name         String?        
  email        String?       @unique
  mobile       String?       @unique
  facebookId   String?
  googleId     String?
  lineId       String?
  password     String?
  location     String?
  profileImage String?
  isActive     Boolean       @default(true)
  banCount     Int           @default(0)
  role         Role          @default(user)
  Resevations  Resevations[]
}

model Resevations {
  id          Int         @id @default(autoincrement())
  userId      Int
  user        Users       @relation(fields: [userId], references: [id])
  shopId      Int
  shop        Shops       @relation(fields: [shopId], references: [id])
  branchId    Int
  branch      Branchs     @relation(fields: [branchId], references: [id])
  queueNumber Int
  status      Status
  type        reservation
  createdAt   DateTime    @default(now())
}

model Shops {
  id                  Int           @id @default(autoincrement())
  registerationNumber String?
  registertionPic     String?
  shopName            String
  shopLat             Float
  shopLan             Float
  shopMobile          String
  openingTimes        String
  closingTimes        String
  currentQueueNumber  Int?
  shopPicture         String
  ownerFirstName      String
  ownerLastName       String
  idNumber            String
  idCard              String
  isOpen              Boolean       @default(true)
  isApprove           is_approve    @default(pending)
  Resevations         Resevations[]
  Categories          Categories[]
  Branchs             Branchs[]
  shopAccount         ShopAccount   @relation(fields: [shopAccountId], references: [id])
  shopAccountId       Int
}

model ShopAccount {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  role     String  @default("vendor")
  Shops    Shops[]
}

model Categories {
  id     Int    @id @default(autoincrement())
  typeId Int
  type   Type   @relation(fields: [typeId], references: [id])
  shopId Int
  shop   Shops  @relation(fields: [shopId], references: [id])
  name   String
}

model Type {
  id         Int          @id @default(autoincrement())
  name       String
  Categories Categories[]
}

model Branchs {
  id          Int           @id @default(autoincrement())
  shopId      Int
  shop        Shops         @relation(fields: [shopId], references: [id])
  name        String
  Resevations Resevations[]
  Location    Location[]
}

model Location {
  id       Int     @id @default(autoincrement())
  branchId Int
  branch   Branchs @relation(fields: [branchId], references: [id])
  lat      String
  long     String
}

enum Role {
  user
  admin
}

enum Status {
  pending
  accepted
  cancelled
}

enum is_approve {
  pending
  approved
  rejected
}

enum reservation {
  one
  two
  three
  four
}
