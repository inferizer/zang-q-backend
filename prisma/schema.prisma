generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int           @id @default(autoincrement())
  username     String?
  email        String?       @unique
  mobile       String?       @unique
  facebookId   String?
  googleId     String?
  lineId       String?
  password     String?
  location     String?
  profileImage String?
  isActive     Boolean       @default(true)
  banCount     Int           @default(0)
  role         Role          @default(user)
  Resevations  Resevations[]
}

model Resevations {
  id          Int         @id @default(autoincrement())
  userId      Int?
  user        Users?      @relation(fields: [userId], references: [id])
  shopId      Int
  shop        Shops       @relation(fields: [shopId], references: [id])
  queueNumber Int         @map("queue_number")
  status      Status      @default(pending)
  type        reservation
  createdAt   DateTime    @default(now())
  date        String
  time        String
  seat        Int
  socket      String?
}

model Shops {
  id                  Int               @id @default(autoincrement())
  registerationNumber String?           @unique
  registertionPic     String?           
  shopName            String            @unique
  shopLat             Float             
  shopLan             Float             
  shopMobile          String            @unique
  openingTimes        String            
  closingTimes        String            
  currentQueueNumber  Int?              
  shopPicture         String            
  ownerFirstName      String            
  ownerLastName       String            
  idNumber            String            @unique
  idCard              String            
  isOpen              Boolean           @default(true)
  isApprove           is_approve        @default(pending)
  Resevations         Resevations[]
  shopAccount         ShopAccount       @relation(fields: [shopAccountId], references: [id])
  shopAccountId       Int
  ShopsCategories     ShopsCategories[]
}

model ShopAccount {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  role     String  @default("vendor")
  Shops    Shops[]
}

model ShopsCategories {
  id           Int        @id @default(autoincrement())
  categories   Categories @relation(fields: [categoriesId], references: [id])
  shop         Shops      @relation(fields: [shopsId], references: [id])
  shopsId      Int
  categoriesId Int
}

model Categories {
  id              Int               @id @default(autoincrement())
  name            String
  ShopsCategories ShopsCategories[]
}

enum Role {
  user
  admin
  super_admin
}

enum Status {
  pending
  accepted
  cancelled
}

enum is_approve {
  pending
  approved
  rejected
}

enum reservation {
  one
  two
  three
  four
}
